package io.github.gaming32.sdl4j.sdl_enums;

public class SDL_KeyCode {
    public static final int

    UNKNOWN = 0,

    RETURN = '\r',
    ESCAPE = 0x1B,
    BACKSPACE = '\b',
    TAB = '\t',
    SPACE = ' ',
    EXCLAIM = '!',
    QUOTEDBL = '"',
    HASH = '#',
    PERCENT = '%',
    DOLLAR = '$',
    AMPERSAND = '&',
    QUOTE = '\'',
    LEFTPAREN = '(',
    RIGHTPAREN = ')',
    ASTERISK = '*',
    PLUS = '+',
    COMMA = ',',
    MINUS = '-',
    PERIOD = '.',
    SLASH = '/',
    SDLK_0 = '0',
    SDLK_1 = '1',
    SDLK_2 = '2',
    SDLK_3 = '3',
    SDLK_4 = '4',
    SDLK_5 = '5',
    SDLK_6 = '6',
    SDLK_7 = '7',
    SDLK_8 = '8',
    SDLK_9 = '9',
    COLON = ':',
    SEMICOLON = ';',
    LESS = '<',
    EQUALS = '=',
    GREATER = '>',
    QUESTION = '?',
    AT = '@',

    /*
       Skip uppercase letters
     */

    LEFTBRACKET = '[',
    BACKSLASH = '\\',
    RIGHTBRACKET = ']',
    CARET = '^',
    UNDERSCORE = '_',
    BACKQUOTE = '`',
    a = 'a',
    b = 'b',
    c = 'c',
    d = 'd',
    e = 'e',
    f = 'f',
    g = 'g',
    h = 'h',
    i = 'i',
    j = 'j',
    k = 'k',
    l = 'l',
    m = 'm',
    n = 'n',
    o = 'o',
    p = 'p',
    q = 'q',
    r = 'r',
    s = 's',
    t = 't',
    u = 'u',
    v = 'v',
    w = 'w',
    x = 'x',
    y = 'y',
    z = 'z',

    CAPSLOCK = TO_KEYCODE(SDL_Scancode.CAPSLOCK),

    F1 = TO_KEYCODE(SDL_Scancode.F1),
    F2 = TO_KEYCODE(SDL_Scancode.F2),
    F3 = TO_KEYCODE(SDL_Scancode.F3),
    F4 = TO_KEYCODE(SDL_Scancode.F4),
    F5 = TO_KEYCODE(SDL_Scancode.F5),
    F6 = TO_KEYCODE(SDL_Scancode.F6),
    F7 = TO_KEYCODE(SDL_Scancode.F7),
    F8 = TO_KEYCODE(SDL_Scancode.F8),
    F9 = TO_KEYCODE(SDL_Scancode.F9),
    F10 = TO_KEYCODE(SDL_Scancode.F10),
    F11 = TO_KEYCODE(SDL_Scancode.F11),
    F12 = TO_KEYCODE(SDL_Scancode.F12),

    PRINTSCREEN = TO_KEYCODE(SDL_Scancode.PRINTSCREEN),
    SCROLLLOCK = TO_KEYCODE(SDL_Scancode.SCROLLLOCK),
    PAUSE = TO_KEYCODE(SDL_Scancode.PAUSE),
    INSERT = TO_KEYCODE(SDL_Scancode.INSERT),
    HOME = TO_KEYCODE(SDL_Scancode.HOME),
    PAGEUP = TO_KEYCODE(SDL_Scancode.PAGEUP),
    DELETE = 0x7F,
    END = TO_KEYCODE(SDL_Scancode.END),
    PAGEDOWN = TO_KEYCODE(SDL_Scancode.PAGEDOWN),
    RIGHT = TO_KEYCODE(SDL_Scancode.RIGHT),
    LEFT = TO_KEYCODE(SDL_Scancode.LEFT),
    DOWN = TO_KEYCODE(SDL_Scancode.DOWN),
    UP = TO_KEYCODE(SDL_Scancode.UP),

    NUMLOCKCLEAR = TO_KEYCODE(SDL_Scancode.NUMLOCKCLEAR),
    KP_DIVIDE = TO_KEYCODE(SDL_Scancode.KP_DIVIDE),
    KP_MULTIPLY = TO_KEYCODE(SDL_Scancode.KP_MULTIPLY),
    KP_MINUS = TO_KEYCODE(SDL_Scancode.KP_MINUS),
    KP_PLUS = TO_KEYCODE(SDL_Scancode.KP_PLUS),
    KP_ENTER = TO_KEYCODE(SDL_Scancode.KP_ENTER),
    KP_1 = TO_KEYCODE(SDL_Scancode.KP_1),
    KP_2 = TO_KEYCODE(SDL_Scancode.KP_2),
    KP_3 = TO_KEYCODE(SDL_Scancode.KP_3),
    KP_4 = TO_KEYCODE(SDL_Scancode.KP_4),
    KP_5 = TO_KEYCODE(SDL_Scancode.KP_5),
    KP_6 = TO_KEYCODE(SDL_Scancode.KP_6),
    KP_7 = TO_KEYCODE(SDL_Scancode.KP_7),
    KP_8 = TO_KEYCODE(SDL_Scancode.KP_8),
    KP_9 = TO_KEYCODE(SDL_Scancode.KP_9),
    KP_0 = TO_KEYCODE(SDL_Scancode.KP_0),
    KP_PERIOD = TO_KEYCODE(SDL_Scancode.KP_PERIOD),

    APPLICATION = TO_KEYCODE(SDL_Scancode.APPLICATION),
    POWER = TO_KEYCODE(SDL_Scancode.POWER),
    KP_EQUALS = TO_KEYCODE(SDL_Scancode.KP_EQUALS),
    F13 = TO_KEYCODE(SDL_Scancode.F13),
    F14 = TO_KEYCODE(SDL_Scancode.F14),
    F15 = TO_KEYCODE(SDL_Scancode.F15),
    F16 = TO_KEYCODE(SDL_Scancode.F16),
    F17 = TO_KEYCODE(SDL_Scancode.F17),
    F18 = TO_KEYCODE(SDL_Scancode.F18),
    F19 = TO_KEYCODE(SDL_Scancode.F19),
    F20 = TO_KEYCODE(SDL_Scancode.F20),
    F21 = TO_KEYCODE(SDL_Scancode.F21),
    F22 = TO_KEYCODE(SDL_Scancode.F22),
    F23 = TO_KEYCODE(SDL_Scancode.F23),
    F24 = TO_KEYCODE(SDL_Scancode.F24),
    EXECUTE = TO_KEYCODE(SDL_Scancode.EXECUTE),
    HELP = TO_KEYCODE(SDL_Scancode.HELP),
    MENU = TO_KEYCODE(SDL_Scancode.MENU),
    SELECT = TO_KEYCODE(SDL_Scancode.SELECT),
    STOP = TO_KEYCODE(SDL_Scancode.STOP),
    AGAIN = TO_KEYCODE(SDL_Scancode.AGAIN),
    UNDO = TO_KEYCODE(SDL_Scancode.UNDO),
    CUT = TO_KEYCODE(SDL_Scancode.CUT),
    COPY = TO_KEYCODE(SDL_Scancode.COPY),
    PASTE = TO_KEYCODE(SDL_Scancode.PASTE),
    FIND = TO_KEYCODE(SDL_Scancode.FIND),
    MUTE = TO_KEYCODE(SDL_Scancode.MUTE),
    VOLUMEUP = TO_KEYCODE(SDL_Scancode.VOLUMEUP),
    VOLUMEDOWN = TO_KEYCODE(SDL_Scancode.VOLUMEDOWN),
    KP_COMMA = TO_KEYCODE(SDL_Scancode.KP_COMMA),
    KP_EQUALSAS400 =
        TO_KEYCODE(SDL_Scancode.KP_EQUALSAS400),

    ALTERASE = TO_KEYCODE(SDL_Scancode.ALTERASE),
    SYSREQ = TO_KEYCODE(SDL_Scancode.SYSREQ),
    CANCEL = TO_KEYCODE(SDL_Scancode.CANCEL),
    CLEAR = TO_KEYCODE(SDL_Scancode.CLEAR),
    PRIOR = TO_KEYCODE(SDL_Scancode.PRIOR),
    RETURN2 = TO_KEYCODE(SDL_Scancode.RETURN2),
    SEPARATOR = TO_KEYCODE(SDL_Scancode.SEPARATOR),
    OUT = TO_KEYCODE(SDL_Scancode.OUT),
    OPER = TO_KEYCODE(SDL_Scancode.OPER),
    CLEARAGAIN = TO_KEYCODE(SDL_Scancode.CLEARAGAIN),
    CRSEL = TO_KEYCODE(SDL_Scancode.CRSEL),
    EXSEL = TO_KEYCODE(SDL_Scancode.EXSEL),

    KP_00 = TO_KEYCODE(SDL_Scancode.KP_00),
    KP_000 = TO_KEYCODE(SDL_Scancode.KP_000),
    THOUSANDSSEPARATOR =
        TO_KEYCODE(SDL_Scancode.THOUSANDSSEPARATOR),
    DECIMALSEPARATOR =
        TO_KEYCODE(SDL_Scancode.DECIMALSEPARATOR),
    CURRENCYUNIT = TO_KEYCODE(SDL_Scancode.CURRENCYUNIT),
    CURRENCYSUBUNIT =
        TO_KEYCODE(SDL_Scancode.CURRENCYSUBUNIT),
    KP_LEFTPAREN = TO_KEYCODE(SDL_Scancode.KP_LEFTPAREN),
    KP_RIGHTPAREN = TO_KEYCODE(SDL_Scancode.KP_RIGHTPAREN),
    KP_LEFTBRACE = TO_KEYCODE(SDL_Scancode.KP_LEFTBRACE),
    KP_RIGHTBRACE = TO_KEYCODE(SDL_Scancode.KP_RIGHTBRACE),
    KP_TAB = TO_KEYCODE(SDL_Scancode.KP_TAB),
    KP_BACKSPACE = TO_KEYCODE(SDL_Scancode.KP_BACKSPACE),
    KP_A = TO_KEYCODE(SDL_Scancode.KP_A),
    KP_B = TO_KEYCODE(SDL_Scancode.KP_B),
    KP_C = TO_KEYCODE(SDL_Scancode.KP_C),
    KP_D = TO_KEYCODE(SDL_Scancode.KP_D),
    KP_E = TO_KEYCODE(SDL_Scancode.KP_E),
    KP_F = TO_KEYCODE(SDL_Scancode.KP_F),
    KP_XOR = TO_KEYCODE(SDL_Scancode.KP_XOR),
    KP_POWER = TO_KEYCODE(SDL_Scancode.KP_POWER),
    KP_PERCENT = TO_KEYCODE(SDL_Scancode.KP_PERCENT),
    KP_LESS = TO_KEYCODE(SDL_Scancode.KP_LESS),
    KP_GREATER = TO_KEYCODE(SDL_Scancode.KP_GREATER),
    KP_AMPERSAND = TO_KEYCODE(SDL_Scancode.KP_AMPERSAND),
    KP_DBLAMPERSAND =
        TO_KEYCODE(SDL_Scancode.KP_DBLAMPERSAND),
    KP_VERTICALBAR =
        TO_KEYCODE(SDL_Scancode.KP_VERTICALBAR),
    KP_DBLVERTICALBAR =
        TO_KEYCODE(SDL_Scancode.KP_DBLVERTICALBAR),
    KP_COLON = TO_KEYCODE(SDL_Scancode.KP_COLON),
    KP_HASH = TO_KEYCODE(SDL_Scancode.KP_HASH),
    KP_SPACE = TO_KEYCODE(SDL_Scancode.KP_SPACE),
    KP_AT = TO_KEYCODE(SDL_Scancode.KP_AT),
    KP_EXCLAM = TO_KEYCODE(SDL_Scancode.KP_EXCLAM),
    KP_MEMSTORE = TO_KEYCODE(SDL_Scancode.KP_MEMSTORE),
    KP_MEMRECALL = TO_KEYCODE(SDL_Scancode.KP_MEMRECALL),
    KP_MEMCLEAR = TO_KEYCODE(SDL_Scancode.KP_MEMCLEAR),
    KP_MEMADD = TO_KEYCODE(SDL_Scancode.KP_MEMADD),
    KP_MEMSUBTRACT =
        TO_KEYCODE(SDL_Scancode.KP_MEMSUBTRACT),
    KP_MEMMULTIPLY =
        TO_KEYCODE(SDL_Scancode.KP_MEMMULTIPLY),
    KP_MEMDIVIDE = TO_KEYCODE(SDL_Scancode.KP_MEMDIVIDE),
    KP_PLUSMINUS = TO_KEYCODE(SDL_Scancode.KP_PLUSMINUS),
    KP_CLEAR = TO_KEYCODE(SDL_Scancode.KP_CLEAR),
    KP_CLEARENTRY = TO_KEYCODE(SDL_Scancode.KP_CLEARENTRY),
    KP_BINARY = TO_KEYCODE(SDL_Scancode.KP_BINARY),
    KP_OCTAL = TO_KEYCODE(SDL_Scancode.KP_OCTAL),
    KP_DECIMAL = TO_KEYCODE(SDL_Scancode.KP_DECIMAL),
    KP_HEXADECIMAL =
        TO_KEYCODE(SDL_Scancode.KP_HEXADECIMAL),

    LCTRL = TO_KEYCODE(SDL_Scancode.LCTRL),
    LSHIFT = TO_KEYCODE(SDL_Scancode.LSHIFT),
    LALT = TO_KEYCODE(SDL_Scancode.LALT),
    LGUI = TO_KEYCODE(SDL_Scancode.LGUI),
    RCTRL = TO_KEYCODE(SDL_Scancode.RCTRL),
    RSHIFT = TO_KEYCODE(SDL_Scancode.RSHIFT),
    RALT = TO_KEYCODE(SDL_Scancode.RALT),
    RGUI = TO_KEYCODE(SDL_Scancode.RGUI),

    MODE = TO_KEYCODE(SDL_Scancode.MODE),

    AUDIONEXT = TO_KEYCODE(SDL_Scancode.AUDIONEXT),
    AUDIOPREV = TO_KEYCODE(SDL_Scancode.AUDIOPREV),
    AUDIOSTOP = TO_KEYCODE(SDL_Scancode.AUDIOSTOP),
    AUDIOPLAY = TO_KEYCODE(SDL_Scancode.AUDIOPLAY),
    AUDIOMUTE = TO_KEYCODE(SDL_Scancode.AUDIOMUTE),
    MEDIASELECT = TO_KEYCODE(SDL_Scancode.MEDIASELECT),
    WWW = TO_KEYCODE(SDL_Scancode.WWW),
    MAIL = TO_KEYCODE(SDL_Scancode.MAIL),
    CALCULATOR = TO_KEYCODE(SDL_Scancode.CALCULATOR),
    COMPUTER = TO_KEYCODE(SDL_Scancode.COMPUTER),
    AC_SEARCH = TO_KEYCODE(SDL_Scancode.AC_SEARCH),
    AC_HOME = TO_KEYCODE(SDL_Scancode.AC_HOME),
    AC_BACK = TO_KEYCODE(SDL_Scancode.AC_BACK),
    AC_FORWARD = TO_KEYCODE(SDL_Scancode.AC_FORWARD),
    AC_STOP = TO_KEYCODE(SDL_Scancode.AC_STOP),
    AC_REFRESH = TO_KEYCODE(SDL_Scancode.AC_REFRESH),
    AC_BOOKMARKS = TO_KEYCODE(SDL_Scancode.AC_BOOKMARKS),

    BRIGHTNESSDOWN =
        TO_KEYCODE(SDL_Scancode.BRIGHTNESSDOWN),
    BRIGHTNESSUP = TO_KEYCODE(SDL_Scancode.BRIGHTNESSUP),
    DISPLAYSWITCH = TO_KEYCODE(SDL_Scancode.DISPLAYSWITCH),
    KBDILLUMTOGGLE =
        TO_KEYCODE(SDL_Scancode.KBDILLUMTOGGLE),
    KBDILLUMDOWN = TO_KEYCODE(SDL_Scancode.KBDILLUMDOWN),
    KBDILLUMUP = TO_KEYCODE(SDL_Scancode.KBDILLUMUP),
    EJECT = TO_KEYCODE(SDL_Scancode.EJECT),
    SLEEP = TO_KEYCODE(SDL_Scancode.SLEEP),
    APP1 = TO_KEYCODE(SDL_Scancode.APP1),
    APP2 = TO_KEYCODE(SDL_Scancode.APP2),

    AUDIOREWIND = TO_KEYCODE(SDL_Scancode.AUDIOREWIND),
    AUDIOFASTFORWARD = TO_KEYCODE(SDL_Scancode.AUDIOFASTFORWARD);

    private static final int SCANCODE_MASK = 1 << 30;

    private static int TO_KEYCODE(int x) {
        return x | SCANCODE_MASK;
    }
}
